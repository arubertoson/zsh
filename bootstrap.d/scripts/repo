#!/usr/bin/env bash
# repo - ghq-backed clone helper with simple work/home routing
# Place in ~/.local/bin/repo and `chmod +x ~/.local/bin/repo`

set -euo pipefail

DEV_ROOT="${XDG_DEV_HOME:-$HOME/dev}"
DEV_HOME="${DEV_HOME_ROOT:-$DEV_ROOT/home}"
DEV_WORK="${DEV_WORK_ROOT:-$DEV_ROOT/work}"

log() { echo "$*" >&2; }
log_error() { echo "[ERROR] $*" >&2; }

validate_tools() {
    local missing_tools=()

    if ! command -v gh &> /dev/null; then
        missing_tools+=("gh")
    fi

    if ! command -v ghq &> /dev/null; then
        missing_tools+=("ghq")
    fi

    if [ ${#missing_tools[@]} -ne 0 ]; then
        log_error "Missing required tools: ${missing_tools[*]}"
        log_error "Please install them and try again"
        exit 1
    fi
}

usage() {
  cat <<EOF
Usage:
  repo clone <owner/repo|url> [--profile work|home]
  repo create <repo|owner/repo> [profile] [visibility]
  repo list

Environment Variables:
  GITHUB_USER    - Your GitHub username (required for creating user repos)

Notes:
  - Shorthand owner/repo uses SSH: git@github.com:owner/repo.git (personal) or git@github.work:owner/repo.git (work)
  - Roots: home -> $DEV_HOME, work -> $DEV_WORK (under $DEV_ROOT)
  - Create defaults: <repo> -> home (user repo), <org>/<repo> -> work
  - Create performs a local clone in the chosen root
EOF
  exit 2
}

is_url() { [[ $1 =~ ^(https?://|git@) ]]; }

# Normalize owner/repo (strip prefixes/suffixes)
norm_repo() {
  local v=$1
  v=${v#github:}
  v=${v%.git}
  printf '%s\n' "$v"
}

gh_user() {
  if [[ -z ${GITHUB_USER:-} ]]; then
    log_error "GITHUB_USER environment variable is not set"
    log_error "Please set it with: export GITHUB_USER=your_github_username"
    exit 1
  fi

  echo "$GITHUB_USER"
}

choose_root() {
  local profile=${1:-}
  case "$profile" in
    work) echo "$DEV_WORK" ;;
    *)    echo "$DEV_HOME" ;;
  esac
}

choose_host() {
  local profile=${1:-}
  case "$profile" in
    work) echo "github.work" ;;
    *)    echo "github.com" ;;
  esac
}

clone_cmd() {
  local remote=$1 profile=${2:-}
  local root=$(choose_root "$profile")

  if is_url "$remote"; then
    if ! GHQ_ROOT="$root" ghq get -s "$remote"; then
      log_error "Failed to clone $remote"
      return 1
    fi
    return
  fi

  local owner_repo ssh_url gh_host
  owner_repo=$(norm_repo "$remote")
  gh_host=$(choose_host "$profile")
  ssh_url="git@${gh_host}:${owner_repo}.git"

  mkdir -p "$root"

  if ! GHQ_ROOT="$root" ghq get -p -s "$ssh_url"; then
    log_error "Failed to clone $owner_repo"
    return 1
  fi
}

create_cmd() {
  local name=$1 profile=${2:-} visibility=${3:-}
  local owner_repo root vis_flag default_profile gh_host

  # Determine repository owner/name and default profile
  if [[ $name == */* ]]; then
    owner_repo=$(norm_repo "$name")
    default_profile=work
  else
    if [[ -z ${GITHUB_USER:-} ]]; then
      log_error "GITHUB_USER environment variable is not set"
      log_error "Please set it with: export GITHUB_USER=your_github_username"
      exit 1
    fi
    local user="$GITHUB_USER"
    owner_repo="${user}/$name"
    default_profile=home
  fi

  # Set profile if not specified
  [[ -z $profile ]] && profile=$default_profile

  # Get paths and settings
  root=$(choose_root "$profile")
  gh_host=$(choose_host "$profile")

  mkdir -p "$root"

  # Set visibility flag
  case "$visibility" in
    public) vis_flag="--public" ;;
    ""|private) vis_flag="--private" ;;
    *) vis_flag="$visibility" ;;
  esac

  pushd "$root" >/dev/null

  # Create the repository
  if ! GH_HOST="$gh_host" gh repo create "$owner_repo" "$vis_flag" --clone 2>&1; then
    log_error "Failed to create repository $owner_repo"
    popd >/dev/null
    exit 1
  fi

  popd >/dev/null
}

list_cmd() {
  GHQ_ROOT="$DEV_ROOT" ghq list || log_error "Failed to list repositories"
}

# Validate required tools before proceeding
validate_tools

case "${1:-}" in
  clone)
    [[ -n ${2:-} ]] || usage
    remote=$2; shift 2 || true
    profile=""
    while [[ $# -gt 0 ]]; do
      case $1 in
        -p|--profile) profile=${2:-}; shift 2;;
        *) shift;;
      esac
    done
    clone_cmd "$remote" "$profile"
    ;;
  create)
    [[ -n ${2:-} ]] || usage
    create_cmd "$2" "${3:-}" "${4:-}"
    ;;
  list)
    list_cmd
    ;;
  *)
    usage
    ;;
esac
