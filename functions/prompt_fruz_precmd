#!/bin/zsh
# Fetch version control info before each new command line.

autoload -Uz vcs_info   # Import the vcs_info function.

function is_inside_git_dir {
    if [[ $(git rev-parse --is-inside-git-dir 2>/dev/null) == "true" ]]; then
      return 1
    fi

    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == "true" ]]; then
      return 0
    fi

    return 1
}

set_window_title() {
  print -n '\e]0;'  # tell the terminal we are setting the title
  print -rn $1
  print -n '\a'  # end set title
}

# This pattern, of redefining the function being called and then calling it
# again (at the bottom of this file), lets you perform setup tasks the first
# time the function is called and ensures they are performed only once.
# $0 evaluates to the name of the current function.
$0() {
  local -i fd=-1  # `fd` stands for "file descriptor"

  # Start an asynchronous process, to avoid slowdown in large repos.
  # <( ... ) starts a process that can be read from.
  # exec {fd}< opens a new file descriptor, stores its number in $fd and
  # connects the process to it, then returns control immediately, letting the
  # process run asynchronously and non-blocking.
  exec {fd}< <(
    if is_inside_git_dir; then
    # we create a second output for the window title
      print -r -- "repo:$(basename "$(git rev-parse --show-toplevel)")[$(git rev-parse --abbrev-ref HEAD)]"
      
      vcs_info
      print -r -- $vcs_info_msg_0_
    fi
  )

  # Hook a callback widget to the fd.
  zle -Fw "$fd" prompt_launchpad_vcs-info
}

# Create a widget that calls the function below.
zle -N prompt_launchpad_vcs-info
prompt_launchpad_vcs-info() {
  # Declare the file descriptor as a local integer variable. This is the file
  # descriptor number passed to the function.
  local -i fd=$1

  # Check if a valid file descriptor is passed to the function. If not, the 
  # function exits immediately. This is a failsafe to ensure that the function 
  # has the necessary input to proceed.
  [[ -z $fd ]] && return

  # Declare a local variable 'REPLY'. This is used by the 'read' command as a 
  # default variable to store input data.
  local REPLY

  # The main block of the function starts here. The block is designed to execute 
  # a series of commands that set the terminal title and update the prompt.
  {
    # 'zle -F' unregisters the file descriptor from Zsh's line editor, ensuring 
    # it does not interfere with the prompt.
    zle -F "$fd"

    # Read the first line of output from the file descriptor. This output is 
    # expected to be the information used for setting the terminal title.
    read -ru$fd

    # Set the terminal title. It includes the hostname (%m), the current user (%n), 
    # and the first line of output from the file descriptor. The sequence '\e]0;' 
    # and '\a' are escape codes used to set the window title in most terminal emulators.
    print -Pn "\e]0;%m@%n $REPLY\a"

    # Read the second line of output from the file descriptor. This output is 
    # expected to be the VCS information for the prompt.
    read -ru$fd

    # Check if the shell is running in a nested mode (SHLVL > 1). If so, append 
    # additional information about the shell level to 'REPLY'.
    (( SHLVL > 1 )) && REPLY+=" %F{242}[${SHLVL}]"

    # Update the right-hand side of the prompt (RPS1) only if there is a change.
    # This avoids unnecessary updates and potential flickering of the prompt.
    if [[ $RPS1 != $REPLY ]]; then
        RPS1=$REPLY
        # Reset the prompt to reflect changes. This is done only if the shell 
        # is about to display a prompt (CONTEXT == start), enhancing performance.
        [[ $CONTEXT == start ]] && zle .reset-prompt
    fi
  } always {
    # The 'always' block is executed regardless of how the preceding block exits.
    # Here, it ensures that the file descriptor is closed. This is crucial for 
    # proper resource management and avoiding file descriptor leaks.
    exec {fd}<&-
  }
}

# Format the output of vcs_info, which our precmd uses to set $RPS1.
#     %a: current action (for example, rebase)
#     %c:   staged changes
#     %u: unstaged changes
#     %b: branch
# https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration
() {
  "$@"           formats          "%c%u%F{14}%b%f"  # 14 is bright cyan.
  "$@"     actionformats  "%F{9}%a %c%u%F{14}%b%f"  #  9 is bright red.
  "$@"         stagedstr  "%F{10}+"   # Set %c.       10 is bright green.
  "$@"       unstagedstr  "%F{9}*"   # Set %u.       11 is bright yellow.
  "$@"  check-for-changes yes         # Enable %c and %u.
} zstyle ':vcs_info:*'

$0 "$@"