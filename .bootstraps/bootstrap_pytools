#!/usr/bin/env bash

# Global pointer to virtual environment storage
export WORKON_HOME="${XDG_CACHE_HOME}/venvs"

# ------------------------------------------------------------------------------
# Pyenv
# ------------------------------------------------------------------------------

if [[ -z "${PYENV_LOADED}" ]]; then
    export PYENV_ROOT="${XDG_APP_HOME}/pyenv"
    export PYENV_VIRTUALENV_DISABLE_PROMPT=1

    # If we don't have pyenv available at this point we are missing it and need to
    # perform the install. The following block pulls down the necessary repos and
    # make the pyenv exec available on paht.
    if (! command -v pyenv >/dev/null); then
        echo "Pyenv is not installed, installing latest"

        if [ ! -d "${PYENV_ROOT}" ]; then
            git clone https://github.com/pyenv/pyenv.git ${PYENV_ROOT}
        fi
        _git_pull ${PYENV_ROOT} >/dev/null

        # Latest
        PYENV_INSTALL_LATEST=${PYENV_ROOT}/plugins/pyenv-install-latest
        if [ ! -d "${PYENV_INSTALL_LATEST}" ]; then
            git clone https://github.com/momo-lab/pyenv-install-latest.git ${PYENV_INSTALL_LATEST}
        fi
        _git_pull ${PYENV_INSTALL_LATEST}

        # Installing necessary packages to build python from source and if successful
        # we finalize the install by linking the pyenv executable
        $(dirname "$0")/bootstrap_python && ln -sf ${PYENV_ROOT}/bin/pyenv ${XDG_BIN_HOME}/pyenv
    fi

    # Virtualenv
    export PYENV_VIRTUALENV_PLUGIN_PATH="${PYENV_ROOT}/plugins/pyenv-virtualenv"
    if [ ! -d "${PYENV_VIRTUALENV_PLUGIN_PATH}" ]; then
        git clone https://github.com/pyenv/pyenv-virtualenv.git ${PYENV_VIRTUALENV_PLUGIN_PATH}
    fi

    # Pyenv need to setup it's own environment, we can achieve this by running the
    # below. To avoid overrideing other envs we don't want to run this in subshells
    # that enherit our current environment
    _in_env ${PYENV_ROOT}/shims ${PATH} || eval "$(${XDG_APP_HOME}/pyenv/bin/pyenv init -)"

    # We want to stay up to date with the patch version of python, this is achieved
    # by comparing the latest to the current version. If we find a newer we install
    # and update the global python version.
    latest=$(pyenv install-latest --print ${BASE_PYTHON_VERSION})
    curver=$(pyenv prefix ${latest})
    if [ ! $? -eq 0 ]; then
        pyenv install ${latest} && pyenv global ${latest}
    fi

    pyenv global ${latest}

    export PYENV_LOADED=1
fi

# ------------------------------------------------------------------------------
# Pipenv
# ------------------------------------------------------------------------------

if [[ -z "${PIPENV_LOADED}" ]]; then
    export PIPENV_CACHE_DIR=${XDG_CACHE_HOME}
    export PIPENV_VENV_IN_PROJECT=1

    if (! command pipenv &>/dev/null); then
        echo "pipenv is not installed"
    fi

    export PIPENV_LOADED=1
fi
